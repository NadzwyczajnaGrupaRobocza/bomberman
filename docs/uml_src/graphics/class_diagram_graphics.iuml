@startuml

interface Entity {
+ update(delta_time)
+ bool areYouDead()
}

class Bomberman {
- phys_id : PhysId
- physics_engine : PhysicsEngine&
- render_id : RenderId
- renderer_pool : RendererPool&
- human_player : HumanPlayer
- bomb_launcher : BombLauncher
}

class GameWorld {
- bomberman : Entity
- map : Map
- physics_engine : std::unique_ptr<PhysicsEngine>
- renderer_pool : std::unique_ptr<RendererPool>
- bombs : std::vector<Bomb>
- explosions : std::vector<Explosion>
+ bool is_bomb_at_pos(Vector2D position)
+ create_bomb(Vector2D position, int timeToExplode)
+ create_explosion(Vector2D povesition)
}

class HumanPlayer {
+ Vector2D get_direction()
+ bool wants_bomb()
}

class BombLauncher {
- game_world : GameWorld
- max_bombs_count : int
- current_bombs_count : int
+ bool try_spawn_bomb(Vector2D position)
+ notify_exploded()
}

class Map {
- background : RenderId
- static_element : std::vector<PhysId>
- render_engine : RenderEngine&
- physics_engine : PhysicsEngine&
}

class PhysicsEngine{
+ void set_position(PhysId id, Vector2D position)
+ Vector2D get_position(PhysId id)
+ void solve_collisions()
+ PhysicId register_colider(const math::vec2d&, const math::vec2d&)
}

package "Graphics" #76b900 {
interface RendererPoolFactory{
  + std::unique_ptr<RendererPool> create(const WindowSize&)
}
interface RendererPool{
  + RendererId take(const Size&, const Position&)
  + void give_back(const RendererId&)
  + void cleanup_unused()
  + void render_all()
  + void set_position(const RendererId&, const Position&)
  + Position get_position(const RendererId&)
}
}

class Bomb {
- phys_id : PhysId
- render_id : RenderId
- render_engine : RenderEngine&
- physics_engine : PhysicsEngine&
}

class Explosion {
- phys_ids : std::vector<PhysId>
- render_ids : std::vector<RenderId>
- render_engine : RenderEngine&
- physics_engine : PhysicsEngine&
}

Bomberman --|> Entity
Bomb --|> Entity
Explosion --|> Entity

Bomberman --* GameWorld
Bomb --* GameWorld
Explosion --* GameWorld

HumanPlayer --* Bomberman

BombLauncher --> GameWorld
BombLauncher --* Bomberman


Map --* GameWorld

RendererPool --* GameWorld
PhysicsEngine --* GameWorld

@enduml
