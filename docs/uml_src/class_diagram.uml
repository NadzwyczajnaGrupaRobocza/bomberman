@startuml

namespace graphics{
  interface RendererPool{
    + RendererId acquire(const math::Size2f&, const math::Position2f&)
    + void release(const RendererId&)
    + void render_all()
    + void set_position(const RendererId&, const math::Position2f&)
    + Position get_position(const RendererId&)
  }
  interface Window{
    + bool is_open()
    + void display()
    + void update()
  }
  class RendererId
}

interface Entity {
+ update(delta_time)
+ bool areYouDead()
}

class Bomberman {
- phys_id : PhysId
- physics_engine : PhysicsEngine&
- renderer_id : graphics::RendererId
- renderer_pool : graphics::RendererPool&
- human_player : HumanPlayer
- bomb_launcher : BombLauncher
}
Bomberman o-- graphics.RendererPool
Bomberman *-- graphics.RendererId

class GameWorld {
- bomberman : Entity
- map : Map
- physics_engine : std::unique_ptr<PhysicsEngine>
- renderer_pool : std::unique_ptr<graphics::RendererPool>
- bombs : std::vector<Bomb>
- explosions : std::vector<Explosion>
+ bool is_bomb_at_pos(Vector2D position)
+ create_bomb(Vector2D position, int timeToExplode)
+ create_explosion(Vector2D povesition)
}
GameWorld o-down- graphics.RendererPool

class HumanPlayer {
+ Vector2D get_direction()
+ bool wants_bomb()
}

class BombLauncher {
- game_world : GameWorld
- max_bombs_count : int
- current_bombs_count : int
+ bool try_spawn_bomb(Vector2D position)
+ notify_exploded()
}

class Map {
- background : graphics::RendererId
- static_element : std::vector<PhysId>
- renderer_pool : graphics::RendererPool&
- physics_engine : PhysicsEngine&
}
Map o-- graphics.RendererPool
Map *-- graphics.RendererId

class PhysicsEngine{
+ void set_position(PhysId id, Vector2D position)
+ Vector2D get_position(PhysId id)
+ void solve_collisions()
+ PhysicId register_colider(const math::vec2d&, const math::vec2d&)
}

class Bomb {
- phys_id : PhysId
- renderer_id : graphics::RendererId
- physics_engine : PhysicsEngine&
- renderer_pool : RendererPool&
}
Bomb o-- graphics.RendererPool
Bomb *-- graphics.RendererId

class Explosion {
- renderer_ids : std::vector<graphics::RendererId>
- phys_ids : std::vector<PhysId>
- physics_engine : PhysicsEngine&
- renderer_pool : graphics::RendererPool&
}
Explosion o-- graphics.RendererPool
Explosion *-- graphics.RendererId

Bomberman --|> Entity
Bomb --|> Entity
Explosion --|> Entity

Bomberman --* GameWorld
Bomb --* GameWorld
Explosion --* GameWorld

HumanPlayer --* Bomberman

BombLauncher --> GameWorld
BombLauncher --* Bomberman

Map --* GameWorld

PhysicsEngine --* GameWorld

@enduml
